defaultTasks 'clean', 'test', 'aggregate'

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

buildscript {
    project.ext {
        serenityVersion = '2.4.34'
    }
    repositories {
        mavenLocal()
        /*maven {
            url "https://plugins.gradle.org/m2/"
        }*/
        jcenter()
    }
    dependencies {
        classpath('net.serenity-bdd:serenity-gradle-plugin:' + serenityVersion)
        //classpath('org.gradle:test-retry-gradle-plugin:1.1.0')
    }
}

ext {
    slf4jVersion = '1.7.32'
    serenityCoreVersion = '3.0.5'
    cucumberCoreVersion = '6.11.0'
    serenityCucumberVersion = '2.6.0'
    junitVersion = '4.13.2'
    assertJVersion = '3.21.0'
    logbackVersion = '1.2.6'
    //fakerVersion = '1.0.2'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {

    testCompile "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
            "junit:junit:${junitVersion}",
            "org.assertj:assertj-core:${assertJVersion}"



    /*implementation "com.github.javafaker:javafaker:${fakerVersion}",
            "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    testImplementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "io.cucumber:cucumber-core:${cucumberCoreVersion}",
            "net.serenity-bdd:serenity-cucumber6:${serenityCucumberVersion}",
            "io.cucumber:cucumber-junit:${cucumberCoreVersion}",
            "junit:junit:${junitVersion}",
            "org.assertj:assertj-core:${assertJVersion}"

     */
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()

    /*options {
        systemProperties(System.getProperties())
    }

    retry {
        maxRetries = 6
        maxFailures = 40
        failOnPassedAfterRetry = false
    }
    maxParallelForks = 1*/
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)

